/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/items": {
    /** Get list of all tradable items. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Succesfull */
        200: {
          content: {
            "application/json": {
              payload?: {
                items?: components["schemas"]["ItemShort"][];
              };
            };
          };
        };
      };
    };
  };
  "/items/{url_name}": {
    /** Gets information about an item */
    get: operations["getItemInfo"];
  };
  "/items/{url_name}/orders": {
    /** Get list of orders for a given item_id */
    get: {
      parameters: {
        query?: {
          /**
           * @description Include additional information.
           * Will add a new response section with all information about requested model.
           */
          include?: "item";
        };
        header?: {
          Platform?: components["parameters"]["platform"];
        };
        path: {
          url_name: components["parameters"]["url_name"];
        };
      };
      responses: {
        /** @description Successful operation, with `?include=item` */
        200: {
          content: {
            "application/json": {
              payload: {
                orders?: (components["schemas"]["OrderCommon"] & {
                    user?: components["schemas"]["userShort"];
                  })[];
              };
              include?: {
                item?: {
                  /**
                   * @description Object id of requested item
                   * @example 5a2feeb2c2c9e90cbdaa23d4
                   */
                  id?: string;
                  items_in_set?: components["schemas"]["ItemFull"][];
                };
              };
            };
          };
        };
      };
    };
  };
  "/items/{url_name}/dropsources": {
    /** Get dropsources for a given item */
    get: {
      parameters: {
        query?: {
          /**
           * @description Include additional information.
           * Will add a new response section with all information about requested model.
           */
          include?: "item";
        };
        header?: {
          Language?: components["parameters"]["language"];
        };
        path: {
          url_name: components["parameters"]["url_name"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload: {
                dropsources?: components["schemas"]["Dropsource"];
              };
              include?: {
                item?: {
                  /**
                   * @description Object id of requested item
                   * @example 5a2feeb2c2c9e90cbdaa23d4
                   */
                  id?: string;
                  items_in_set?: components["schemas"]["ItemFull"][];
                };
              };
            };
          };
        };
      };
    };
  };
  "/profile/orders": {
    /** Create an order */
    post: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: ObjectID
             * @description ObjectId of an item
             * @example 59e203ce115f1d887cfd7ac6
             */
            item?: string;
            /**
             * @example sell
             * @enum {string}
             */
            order_type?: "sell" | "buy";
            /** @example 12 */
            platinum?: number;
            /** @example 5 */
            quantity?: number;
            /** @example true */
            visible?: boolean;
            /** @example 3 */
            rank?: number;
            /**
             * @description Check item `subtypes` field for possible values
             * @example flawless
             */
            subtype?: string;
          };
        };
      };
      responses: {
        /** @description created */
        200: {
          content: {
            "application/json": {
              payload?: {
                order?: components["schemas"]["OrderCommon"] & {
                  item?: components["schemas"]["ItemInOrder"];
                };
              };
            };
          };
        };
      };
    };
  };
  "/auth/signin": {
    /**
     * Simple login.
     * @description There is 2 ways to maintain authorization:
     * - Through Cookie for Web browsers.
     * - Through Header for other devices.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * @default cookie
             * @enum {string}
             */
            auth_type?: "cookie" | "header";
            email: string;
            /** Format: password */
            password: string;
            /**
             * @description Optional device_id, defined on client side.
             * This param help us to identify your device between login sessions.
             */
            device_id?: string;
          };
        };
      };
      responses: {
        /** @description A JSON representation of currentUser */
        200: {
          headers: {
            /** @description If you used auth_type`=`cookie`, for web-browser */
            "Set-Cookie"?: string;
            /** @description If you used auth_type`=`header`, for devices */
            Authorization?: string;
          };
          content: {
            "application/json": components["schemas"]["currentUser"];
          };
        };
      };
    };
  };
  "/auth/registration": {
    /**
     * Registration of new user and their device.
     * @description There is 2 types of registration, for web browser and for Android device. Android device could avoid to include reCaptha toke by using secret DeviceKey in the request headers.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * @default cookie
             * @enum {string}
             */
            auth_type?: "cookie" | "header";
            email: string;
            /** Format: password */
            password: string;
            /** Format: password */
            password_second: string;
            /** @default en */
            region?: string;
            /** @description Optional device_id, defined on client side. This param help us to keep push subscription between login and logout. And clearer identify your device. */
            device_id?: string;
            /** @description Google reCaptcha, required if you are not using special device auth. */
            recaptcha?: string;
          };
        };
      };
      responses: {
        /** @description A JSON representation of currentUser */
        200: {
          headers: {
            /** @description If you used auth_type`=`cookie`, for web-browser */
            "Set-Cookie"?: string;
            /** @description If you used auth_type`=`header`, for devices */
            Authorization?: string;
          };
          content: {
            "application/json": components["schemas"]["currentUser"];
          };
        };
      };
    };
  };
  "/auth/restore": {
    /**
     * Password restoration.
     * @description You will recieve mail with the new password, short after api call.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            email: string;
          };
        };
      };
      responses: {
        /** @description Empty object */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/settings/notifications/push": {
    /**
     * Get subscription
     * @description Not implemented
     */
    get: {
      responses: {
        /** @description Nothing */
        200: never;
      };
    };
    /**
     * Push subscribe
     * @description There is 3 formats, for web for android
     *
     *
     * Web usage:
     * ---------
     * ```
     * {
     *     'device': 'web'
     *     'subscription':
     *         {
     *         "endpointeger":"https://fcm.googleapis.com/fcm/send/...",
     *         "keys":{
     *             "p256dh":"BBya_RhGe...",
     *             "auth":"2PFoLO3K..."
     *             }
     *         }
     * }
     * ```
     *
     * Android usage:
     * ---------
     * ```
     *   {
     *     'device': 'android'
     *     'subscription':
     *         {
     *         "push_token":"asdnOIHSD2134..."
     *         }
     * }
     * ```
     */
    post: {
      requestBody?: {
        content: {
          "application/json": OneOf<[{
            /** @enum {string} */
            device: "web";
            subscription: {
              endpointeger: string;
              keys: {
                p256dh: string;
                auth: string;
              };
            };
          }, {
            /** @enum {string} */
            device: "android";
            subscription: {
              push_token: string;
            };
          }]>;
        };
      };
      responses: {
        /** @description Ok */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              payload?: "ok";
            };
          };
        };
      };
    };
    /**
     * Push Unsubscribe
     * @description Unflag `subscribed` in our DB from currentUser.
     */
    delete: {
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              payload?: "ok";
            };
          };
        };
      };
    };
  };
  "/auctions/entry/{auction_id}": {
    /** Gets information about auction by auction Id */
    get: {
      parameters: {
        path: {
          auction_id: components["parameters"]["auction_id"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                auction?: components["schemas"]["auctionEntryExpanded"];
              };
            };
          };
        };
      };
    };
  };
  "/auctions/entry/{auction_id}/bids": {
    /** Gets auction bids by auction Id */
    get: {
      parameters: {
        query?: {
          /**
           * @description Include additional information.
           * Will add a new response section with all information about requested model.
           */
          include?: "auction";
        };
        path: {
          auction_id: components["parameters"]["auction_id"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload: {
                bids?: components["schemas"]["bid"][];
              };
              include?: {
                auction?: components["schemas"]["auctionEntryExpanded"];
              };
            };
          };
        };
      };
    };
  };
  "/auctions/create": {
    /**
     * ⚠ Auction creation.
     * @description Create auction, for riven or lich item types.
     */
    post: {
      /** @description Info about auction and item */
      requestBody: {
        content: {
          "application/json": {
            note?: string;
            starting_price: number;
            /** @description If you want ∞ as buyout price, set this to `null` */
            buyout_price: number | null;
            /**
             * @description Minimum delta between the bids, Not appliable right now
             * @default 1
             */
            minimal_increment?: number;
            /**
             * @description Minimum reputation requirenment for participation in this auction.
             * @default 0
             */
            minimal_reputation?: number;
            /**
             * @description is this auction is private and only accesibly by direct link.
             * @default false
             */
            private?: boolean;
            item: components["schemas"]["rivenAuction"] | components["schemas"]["lichAuction"] | components["schemas"]["kubrowAuction"];
          };
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                auction?: components["schemas"]["auctionEntry"];
              };
            };
          };
        };
      };
    };
  };
  "/auctions/search?type=riven": {
    /**
     * Get a list of riven auctions by given search params.
     * @description Auctions from banned users will be excluded.
     * You must specify weapon or one positive atttribute, at least.
     */
    get: {
      parameters: {
        query?: {
          buyout_policy?: components["parameters"]["buyout_policy"];
          /** @description riven weapon `url_name` property */
          weapon_url_name?: string;
          /** @description Positive attributes in for of string: `attr1,attr2,attr3` */
          positive_stats?: string;
          /**
           * @description Negative attributes in for of string: `attr1,attr2,attr3`
           * For None use the string: `None`
           */
          negative_stats?: string;
          /**
           * @description Not used on the frontend right now, becuse this is not a very usefull flag.
           * Used in conjuction with positive stats, like:
           * - `allOf` will get riven auction that contains all of defined positive attributes
           * - `anyOf` will get riven auction that contains any of defined positive attributes
           *
           * Default value is `allOf`
           */
          operation?: "anyOf" | "allOf";
          /** @description Minimum rank value of riven mod */
          mastery_rank_min?: number;
          /** @description Maximum rank value of riven mod */
          mastery_rank_max?: number;
          /** @description Minimum amount of rolls */
          re_rolls_min?: number;
          /** @description Maximum amount of rolls */
          re_rolls_max?: number;
          /** @description Should mod be maxed or whatever. */
          mod_rank?: "any" | "maxed";
          polarity?: "madurai" | "vazarin" | "naramon" | "zenurik" | "any";
          /** @description Sorting, by prices or by attributes value, ascending and descending. */
          sort_by?: "price_desc" | "price_asc" | "positive_attr_desc" | "positive_attr_asc";
        };
        header?: {
          Platform?: components["parameters"]["platform"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                auctions?: components["schemas"]["auctionEntryExpanded"][];
              };
            };
          };
        };
      };
    };
  };
  "/auctions/search?type=lich": {
    /**
     * Get a list of lich auctions by given search params.
     * @description Auctions from banned users will be excluded.
     */
    get: {
      parameters: {
        query?: {
          buyout_policy?: components["parameters"]["buyout_policy"];
          /** @description lich weapon `url_name` property */
          weapon_url_name?: string;
          /** @description lich element */
          element?: components["schemas"]["element"];
          /**
           * @description lich is having ephemera
           * ephemera is based on lich element.
           */
          ephemera?: boolean;
          /** @description Minimum bonus damage value of desirable lich */
          damage_min?: number;
          /** @description Minimum bonus damage value of desirable lich */
          damage_max?: number;
          /** @description Lich quirk `url_name` property */
          quirk?: string;
          /** @description Sorting, by prices or by weapon damage bonus value, ascending and descending. */
          sort_by?: "price_desc" | "price_asc" | "damage_desc" | "damage_asc";
        };
        header?: {
          Platform?: components["parameters"]["platform"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                auctions?: components["schemas"]["auctionEntryExpanded"][];
              };
            };
          };
        };
      };
    };
  };
  "/lich/weapons": {
    /** Get a list of lich weapons. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                weapons?: components["schemas"]["nemesisWeapon"][];
              };
            };
          };
        };
      };
    };
  };
  "/lich/ephemeras": {
    /** Get a list of lich ephemeras. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                ephemeras?: components["schemas"]["nemesisEphemera"][];
              };
            };
          };
        };
      };
    };
  };
  "/lich/quirks": {
    /** Get a list of lich quirks. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                quirks?: components["schemas"]["nemesisQuirk"][];
              };
            };
          };
        };
      };
    };
  };
  "/sister/weapons": {
    /** Get a list of sister weapons. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                weapons?: components["schemas"]["nemesisWeapon"][];
              };
            };
          };
        };
      };
    };
  };
  "/sister/ephermeras": {
    /** Get a list of sister ephemras. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                ephemeras?: components["schemas"]["nemesisEphemera"][];
              };
            };
          };
        };
      };
    };
  };
  "/sister/quirks": {
    /** Get a list of sister quirks. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                quirks?: components["schemas"]["nemesisQuirk"][];
              };
            };
          };
        };
      };
    };
  };
  "/riven/items": {
    /** Get a list of riven items. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                items?: components["schemas"]["rivenItem"][];
              };
            };
          };
        };
      };
    };
  };
  "/riven/attributes": {
    /** Get a list of riven attributes. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                attributes?: components["schemas"]["rivenAttribute"][];
              };
            };
          };
        };
      };
    };
  };
  "/locations": {
    /** Get a list of known game locations. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                locations?: components["schemas"]["Location"][];
              };
            };
          };
        };
      };
    };
  };
  "/npc": {
    /** Get a list of known NPCs. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                npc?: components["schemas"]["Npc"][];
              };
            };
          };
        };
      };
    };
  };
  "/missions": {
    /** Get a list of known NPCs. */
    get: {
      parameters: {
        header?: {
          Language?: components["parameters"]["language"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              payload?: {
                missions?: components["schemas"]["Mission"][];
              };
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    element: "impact" | "heat" | "cold" | "electricity" | "toxin" | "magnetic" | "radiation";
    /**
     * @description How rare something can be considered
     * @enum {string}
     */
    rarities: "very_common" | "common" | "uncommon" | "rare" | "legendary";
    currentUser: {
      /** Format: ObjectId */
      id?: string;
      anonymous?: boolean;
      verification?: boolean;
      ingame_name?: string;
      check_code?: string;
      /** @enum {string} */
      role?: "anonymous" | "user" | "moderator" | "admin";
      patreon_profile?: {
        patreon_founder?: boolean;
        subscription?: boolean;
        /** @enum {string} */
        patreon_badge?: "bronze" | "gold" | "silver" | "platinum";
      };
      /** @enum {string} */
      platform?: "ps4" | "pc" | "xbox";
      region?: string;
      banned?: boolean;
      ban_reason?: string;
      /** @description Path to user avatar in static folder. */
      avatar?: string;
      /** @description Path to user background in static folder. */
      background?: string;
      linked_accounts?: {
        steam_profile?: boolean;
        patreon_profile?: boolean;
        xbox_profile?: boolean;
      };
      has_email?: boolean;
      /** @description how much reviews user wrote today. */
      written_reviews?: number;
      unread_messages?: number;
    };
    userShort: {
      /**
       * Format: ObjectId
       * @example 54e0cdf8e77989024a1e34b2
       */
      id?: string;
      /** @example KycKyc */
      ingame_name?: string;
      /**
       * @example online
       * @enum {string}
       */
      status?: "ingame" | "online" | "offline";
      /** @example en */
      region?: string;
      /** @example 12 */
      reputation?: number;
      /**
       * @default null
       * @example user/avatar/54e0cdf8e77989024a1e34b2.png?0148cdbc2f95ae09d1b7dc863bbff8a9
       */
      avatar?: string | null;
      /**
       * Format: date-time
       * @example "2021-03-15T15:53:16.133Z"
       */
      last_seen?: string | null;
    };
    rivenItem: {
      /**
       * Format: ObjectId
       * @example 5cf5724f9597e1019b1678c7
       */
      id?: string;
      /** @example falcor */
      url_name?: string;
      /**
       * @description Group of the item, like shotgin, rifle, melee, etc.
       * Used for grouping within UI elements.
       *
       * @enum {string}
       */
      group?: "primary" | "secondary" | "melee" | "zaw" | "sentinel" | "archgun" | "kitgun";
      /**
       * @description Type of the riven mod, to restrict certain attributes to specific types.
       * @enum {string}
       */
      riven_type?: "shotgun" | "rifle" | "pistol" | "melee" | "zaw" | "kitgun";
      /** @description path to the icon asset file */
      icon?: string;
      /** @enum {string} */
      icon_format?: "land" | "port";
      thumb?: string;
      /** @description Name of the weapon, depends on the requested language (headers) */
      item_name?: string;
    };
    rivenAttribute: {
      /**
       * Format: ObjectId
       * @example 5c5ca81a96e8d2003834fe63
       */
      id?: string;
      /** @example ammo_maximum */
      url_name?: string;
      /**
       * @description Group of the attribute, like top, melee, etc.
       * Used for grouping within UI elements.
       *
       * @example default
       * @enum {string}
       */
      group?: "default" | "melee" | "top";
      /** @example Ampi */
      prefix?: string;
      /** @example Bin */
      suffix?: string;
      /**
       * @description Negative value of this attribute indicate that attribute is positive, e.g. `Recoil`.
       * @example false
       */
      positive_is_negative?: boolean;
      /**
       * @description This attribute is only available on specific types of items, check item property: `riven_type`
       * If `null`, then this attribute can be selected on every item.
       *
       * @enum {string|null}
       */
      exclusive_to?: "kitgun" | "pistol" | "rifle" | "shotgun" | "melee" | "zaw" | null;
      /**
       * @description Name of the attribute, depends on the requested language (headers)
       * @example Ammo Maximum
       */
      effect?: string;
      /**
       * @description measurement units
       * @example seconds
       * @enum {string|null}
       */
      units?: "percent" | "seconds" | null;
      /**
       * @description This attribute occurs only as a negative.
       * @example false
       */
      negative_only?: boolean;
      /**
       * @description used only while searching for auctions
       * @example true
       */
      search_only?: boolean;
    };
    rivenAuction: {
      /**
       * @description type of the item, in this case it's `riven`
       * @example riven
       */
      type?: string;
      attributes?: {
          positive?: boolean;
          value?: number;
          url_name?: string;
        }[];
      /**
       * @description Riven mod name
       * @example conci-hexacron
       */
      name?: string;
      /** @description Mastery level requirennment for that mod. */
      mastery_level?: number;
      re_rolls?: number;
      /** @description weapon name in url format. */
      weapon_url_name?: string;
      /** @enum {string} */
      polarity?: "madurai" | "vazarin" | "naramon" | "zenurik";
      mod_rank?: number;
    };
    nemesisWeapon: {
      /**
       * Format: ObjectId
       * @example 5e98559a3d9f64005cd702eb
       */
      id?: string;
      /** @example kuva_bramma */
      url_name?: string;
      /**
       * @description it's a part of url, if you want to get an image you need to prepend assets root dirrectory: `http://warframe.market/static/assets/`
       *
       * @example icons/en/kuva_bramma.eaf6bd5d4a8f1413764771719ca2cc27.png
       */
      icon?: string;
      /** @enum {string} */
      icon_format?: "land" | "port";
      /**
       * @description thumb of an icon
       * @example icons/en/thumbs/kuva_bramma.eaf6bd5d4a8f1413764771719ca2cc27.128x128.png
       */
      thumb?: string;
      /** @description Name of the weapon */
      item_name?: string;
    };
    nemesisEphemera: {
      /**
       * Format: ObjectId
       * @example 5e9854b93d9f64004f9136bd
       */
      id?: string;
      /** @example vengeful_shockwave */
      url_name?: string;
      /**
       * @description it's a part of url, if you want to get an image you need to prepend assets root dirrectory: `http://warframe.market/static/assets/`
       *
       * @example icons/en/vengeful_shockwave.6020e14eb5e9516d4bc6ccf5023c864c.png
       */
      icon?: string;
      /**
       * @example port
       * @enum {string}
       */
      icon_format?: "land" | "port";
      /**
       * @description thumb of an icon
       * @example icons/en/thumbs/vengeful_shockwave.6020e14eb5e9516d4bc6ccf5023c864c.128x128.png
       */
      thumb?: string;
      /**
       * @description Path to the GIF animatgion of ephemera
       * @example animations/vengeful_shockwave.971437bf48dec307ed268285b8798228.gif
       */
      animation?: string;
      /** @enum {string} */
      animation_format?: "land" | "port";
      element?: components["schemas"]["element"];
      /**
       * @description Name of the ephemera
       * @example Vengeful Shockwave Ephemera
       */
      item_name?: string;
    };
    nemesisQuirk: {
      /**
       * Format: ObjectId
       * @example 5e9855a43d9f6400697e895c
       */
      id?: string;
      /** @example poor_sense_of_balance */
      url_name?: string;
      /**
       * @description Name of the quirk
       * @example Poor Sense of Balance
       */
      item_name?: string;
      /**
       * @description Description of the quirk
       * @example The lich will retreat after kneeling down and without stabbing
       */
      description?: string;
      /**
       * @description which group this element belongs to, is used to display specific groups on the frontend.
       * @example default
       */
      group?: string;
    };
    lichAuction: {
      /**
       * @description type of the item, in this case it's `lich`
       * @example lich
       */
      type?: string;
      /**
       * @description url_name of any Kuva weapon
       * @example kuva_ogris
       */
      weapon_url_name?: string;
      element?: components["schemas"]["element"];
      damage?: number;
      /**
       * @description Lich having Kuva ephemera (based on element)
       * @default false
       * @example true
       */
      ephemera?: boolean;
      /**
       * @description url_name of any Kuva quirk
       * @default undefined
       * @example fear_of_kubrows
       */
      quirk?: string;
      /** @description Will not be used for now (?) */
      name?: string;
    };
    kubrowAuction: {
      /**
       * @description type of the item, in this case it's `kubrow`
       * @example kubrow
       */
      type?: string;
      name?: string;
    };
    auctionEntry: {
      /** Format: ObjectId */
      id?: string;
      /**
       * @description Minimal amount of reputation that is required to participate in this auction.
       * @default 0
       */
      minimal_reputation?: number;
      /**
       * Format: ObjectId
       * @description If winner is set, auction is in the paused state. While on pause, bids can't be added, but can be removed.
       * @default null
       */
      winner?: string | null;
      private?: boolean;
      visible?: boolean;
      /** @description Raw format string, use it inside textarea, for editing purposes. */
      note_raw?: string;
      /** @description It's safe to inject this into html, this is refined, formatted string from MD processor. */
      note?: string;
      /** Format: ObjectId */
      owner?: string;
      starting_price?: number;
      /**
       * @description if `buyout_price` is set to null, that means ∞
       * @default null
       */
      buyout_price?: number | null;
      /**
       * @description Minimum bid increase value
       * @default 1
       */
      minimal_increment?: number;
      /** @description Shortcut to `starting_price` == `buyout_price`, means that auction is not an auction, but an order. */
      is_direct_sell?: boolean;
      /** @default null */
      top_bid?: number | null;
      /** Format: date-time */
      created?: string;
      /**
       * Format: date-time
       * @description Last time auction was updated, eighter by owner or by placing a bid.
       */
      updated?: string;
      /** @enum {string} */
      platform?: "switch" | "pc" | "ps4" | "xbox";
      /** @description Auction is closed, and was marked for removal or archiving, no one can add or remove bids now. */
      closed?: boolean;
      /**
       * @description Auction will be removed or archivated after `marked_operation_at`
       * @default null
       * @enum {string|null}
       */
      is_marked_for?: null | "removing" | "archiving";
      /**
       * Format: date-time
       * @default null
       */
      marked_operation_at?: string | null;
      item?: components["schemas"]["rivenAuction"] | components["schemas"]["lichAuction"] | components["schemas"]["kubrowAuction"];
    };
    /**
     * @description `owner` will contain `userShort` model.
     * ***
     */
    auctionEntryExpanded: components["schemas"]["auctionEntry"] & {
      owner?: components["schemas"]["userShort"];
    };
    bid: {
      /** Format: ObjectId */
      id?: string;
      /** Format: ObjectId */
      auction?: string;
      /** Format: ObjectId */
      user?: string;
      value?: number;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string;
    };
    langInItem: {
      /** @example Axi A1 Relic */
      item_name?: string;
      /** @example An artifact containing Orokin secrets. It can only be opened through the power of the Void. */
      description?: string;
      /** @example https://warframe.fandom.com/wiki/Void_Relic */
      wiki_link?: string | null;
      drop?: ({
          /** @description translated name of the location \\ item */
          name?: string;
          /** @description link to the internal or extarnal source with information about that location */
          link?: string | null;
        })[];
    };
    ItemCommon: {
      /**
       * Format: ObjectId
       * @example 604f697f7bdb09603b885d1e
       */
      id?: string;
      /**
       * @description [a-z] snake case name of the item
       * @example axi_a1_relic
       */
      url_name?: string;
      /**
       * @description it's a part of url, if you want to get an image you need to prepend assets root dirrectory: `http://warframe.market/static/assets/`
       *
       * @example icons/en/axi_a1_relic.a74c06f0cae21bdb8933685c867385f8.png
       */
      icon?: string;
      /** @enum {string} */
      icon_format?: "land" | "port";
      /**
       * @description Thumb of an icon
       * @example /icons/en/thumbs/axi_a1_relic.a74c06f0cae21bdb8933685c867385f8.128x128.png
       */
      thumb?: string;
      /**
       * @description Usually, if item is part of set and not set itself, it will have `sub_icon`
       * like: **Mirage Blueprint** is part of **Mirage Set**, therefore the `icon` will be the **Mirage warframe** icon, and the `sub_icon` will be the **blueprint** icon
       *
       * @example sub_icons/systems_128x128.png
       */
      sub_icon?: string;
      /**
       * @description in the next api version will be renamed to `max_rank`
       * @example 10
       */
      mod_max_rank?: number;
      /**
       * @description relics and fishes are having this field
       * @example [
       *   "intact",
       *   "exceptional",
       *   "flawless",
       *   "radiant"
       * ]
       */
      subtypes?: string[];
      /**
       * @example [
       *   "relic",
       *   "axi"
       * ]
       */
      tags?: string[];
      /** @example 45 */
      ducats?: number;
      /** @example 1 */
      quantity_for_set?: number;
    };
    /** @description same as ItemFull, but with dried up lang related fields and without rarity, set_root, MR, trading tax */
    ItemInOrder: components["schemas"]["ItemCommon"] & {
      en?: {
        /**
         * @description Name of the item
         * @example Axi A1 Relic
         */
        item_name?: string;
      };
      ru?: {
        /**
         * @description Name of the item
         * @example Реликвия Акси A1
         */
        item_name?: string;
      };
      ko?: {
        /**
         * @description Name of the item
         * @example 액시 A1 성유물
         */
        item_name?: string;
      };
      fr?: {
        /**
         * @description Name of the item
         * @example Relique Axi A1
         */
        item_name?: string;
      };
      de?: {
        /**
         * @description Name of the item
         * @example Axi-relikt: A1
         */
        item_name?: string;
      };
      sv?: {
        /**
         * @description Name of the item
         * @example Axi A1 Relic
         */
        item_name?: string;
      };
      zh_hant?: {
        /**
         * @description Name of the item
         * @example 後紀 A1 遺物
         */
        item_name?: string;
      };
      zh_hans?: {
        /**
         * @description Name of the item
         * @example 后纪 A1 遗物
         */
        item_name?: string;
      };
      pt?: {
        /**
         * @description Name of the item
         * @example Relíquia Axi A1
         */
        item_name?: string;
      };
      es?: {
        /**
         * @description Name of the item
         * @example Reliquia Axi A1
         */
        item_name?: string;
      };
      pl?: {
        /**
         * @description Name of the item
         * @example Relikt Axi A1
         */
        item_name?: string;
      };
    };
    /** @description same as ItemInOrder, but lang related fields contain more infos, + rarity, set_root, MR, trading tax. */
    ItemFull: components["schemas"]["ItemCommon"] & ({
      /**
       * @description This item represents set itself
       * @example false
       */
      set_root?: boolean;
      /**
       * @description Mastery requirenment fro this item
       * @example 12
       */
      mastery_level?: number;
      /**
       * @description Item rarity
       * @example rare
       * @enum {string}
       */
      rarity?: "common" | "uncommon" | "rare" | "legendary" | "peculiar";
      /** @example 8000 */
      trading_tax?: number;
      en?: components["schemas"]["langInItem"];
      ru?: components["schemas"]["langInItem"];
      ko?: components["schemas"]["langInItem"];
      fr?: components["schemas"]["langInItem"];
      de?: components["schemas"]["langInItem"];
      sv?: components["schemas"]["langInItem"];
      zh_hant?: components["schemas"]["langInItem"];
      zh_hans?: components["schemas"]["langInItem"];
      pt?: components["schemas"]["langInItem"];
      es?: components["schemas"]["langInItem"];
      pl?: components["schemas"]["langInItem"];
    });
    ItemShort: {
      /**
       * Format: ObjectId
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      id?: string;
      /** @example mirage_prime_systems */
      url_name?: string;
      /**
       * @description Small icon
       * @example icons/en/thumbs/Mirage_Prime_Set.e7f8f484dd6ae6c35f0767fff35a5109.128x128.png
       */
      thumb?: string;
      /**
       * @description depends on you `Language` header
       * @example Mirage Prime Systems
       */
      item_name?: string;
    };
    OrderCommon: {
      /**
       * Format: ObjectId
       * @example 604f83027bdb097a7567b75d
       */
      id?: string;
      /** @example 2 */
      platinum?: number;
      /** @example 12 */
      quantity?: number;
      /** @enum {string} */
      order_type?: "sell" | "buy";
      /** @enum {string} */
      platform?: "xbox" | "pc" | "ps4" | "switch";
      /** @description will be deprecated eventually */
      region?: string;
      /**
       * Format: date-time
       * @example "2021-03-15T15:53:38.000Z"
       */
      creation_date?: string;
      /**
       * Format: date-time
       * @example "2021-03-15T15:53:38.000Z"
       */
      last_update?: string;
      /**
       * @description subtyppe oof an item, all valid subtypes defined inside Item model `subtypes` field
       * @example exceptional
       */
      subtype?: string;
      /**
       * @description Is this order visible?
       * All public orders will be visible, and only orders in your profile could be invisible.
       *
       * @example true
       */
      visible?: boolean;
    };
    OrderRow: components["schemas"]["OrderCommon"] & {
      user?: components["schemas"]["userShort"];
    };
    OrderFull: components["schemas"]["OrderCommon"] & {
      user?: components["schemas"]["userShort"];
      item?: components["schemas"]["ItemInOrder"];
    };
    Dropsource: {
      missions?: ({
          /** @example 5a2feeb1c2c9e90cbdaa23d2 */
          mission_id?: string;
          /** @example 5a2feeb1c2c9e90cbdaa23d2 */
          node_id?: string;
          /**
           * @description How rare item is
           * @enum {string}
           */
          rarity?: "very_common" | "common" | "uncommon" | "rare" | "legendary";
          rate?: number;
          /** @enum {string} */
          item_subtype?: "intact" | "exceptional" | "flawless" | "radiant" | "small" | "medium" | "large" | "basic" | "adorned" | "magnificent";
          /** @enum {string} */
          rotation?: "a" | "b" | "c";
          /**
           * @description openworld missions only
           * @enum {string}
           */
          stage?: "1" | "2" | "3" | "4" | "final";
        })[];
      relics?: ({
          /**
           * Format: ObjectId
           * @example 5a2feeb1c2c9e90cbdaa23d2
           */
          id?: string;
          /**
           * @description How rare item is
           * @enum {string}
           */
          rarity?: "common" | "uncommon" | "rare";
          rate?: {
            /** @example 11 */
            intact?: number;
            /** @example 13 */
            exceptional?: number;
            /** @example 17 */
            flawless?: number;
            /** @example 20 */
            radiant?: number;
          };
        })[];
      npc?: ({
          /**
           * Format: ObjectId
           * @example 5a2feeb1c2c9e90cbdaa23d2
           */
          id?: string;
          /**
           * @description How rare item is
           * @enum {string}
           */
          rarity?: "very_common" | "common" | "uncommon" | "rare" | "legendary";
          /**
           * @description the droprate of the item being dropped from the enemy's drop list, the final droprate should be multipled with chance
           * @example 4.42
           */
          rate?: number;
        })[];
    };
    /** @description What you can get from this npc */
    NpcDropData: {
      /** @enum {string} */
      type?: "npc";
      /**
       * Format: ObjectId
       * @description id of an item
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      item?: string;
      /**
       * Format: ObjectId
       * @description id of an npc
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      npc?: string;
      /**
       * @description Chance to get item on kill
       * @example 4.5
       */
      rate?: number;
      rarity?: components["schemas"]["rarities"];
    };
    /** @description What you can get from this mission as reward */
    MissionDropData: {
      /** @enum {string} */
      type?: "mission";
      /**
       * Format: ObjectId
       * @description id of an item
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      item?: string;
      /**
       * Format: ObjectId
       * @description id of a mission
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      mission?: string;
      /**
       * Format: ObjectId
       * @description id of a location
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      location?: string;
      /**
       * @description Chance to get item on mission completion or rotation completion
       * @example 4.5
       */
      rate?: number;
      rarity?: components["schemas"]["rarities"];
      /** @enum {string} */
      rotation?: "b" | "a" | "c";
    };
    /** @description What you can get from this relic */
    RelicDropData: {
      /** @enum {string} */
      type?: "relic";
      /**
       * Format: ObjectId
       * @description id of an item
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      item?: string;
      /**
       * Format: ObjectId
       * @description id of a relic
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      relic?: string;
      rates?: {
        /**
         * @description chance to get an item from intact relic
         * @example 5
         */
        intact?: number;
        /**
         * @description chance to get an item from exceptional relic
         * @example 5
         */
        exceptional?: number;
        /**
         * @description chance to get an item from flawless relic
         * @example 5
         */
        flawless?: number;
        /**
         * @description chance to get an item from radiant relic
         * @example 5
         */
        radiant?: number;
      };
      rarity?: components["schemas"]["rarities"];
    };
    /** @description SolNodes basically */
    Location: {
      /**
       * Format: ObjectId
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      id?: string;
      /** @example plains_of_eidolon */
      url_name?: string;
      icon?: string;
      thumb?: string;
      /** @description min lvl of npc on this location */
      min_level?: number;
      /** @description max lvl of npc on this location */
      max_level?: number;
      /** @enum {string} */
      faction?: "infested" | "grineer" | "corpus" | "corrupted";
      /**
       * @description Node name
       * @example Plains of Eidolon
       */
      node_name?: string;
      /**
       * @description System name
       * @example Earth
       */
      system_name?: string;
    };
    /** @description Known npc */
    Npc: {
      /**
       * Format: ObjectId
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      id?: string;
      /** @example infested_corpus */
      url_name?: string;
      icon?: string;
      thumb?: string;
      /**
       * @description Npc name
       * @example Infested Corpus
       */
      name?: string;
    };
    /** @description Known missions */
    Mission: {
      /**
       * Format: ObjectId
       * @example 5a2feeb1c2c9e90cbdaa23d2
       */
      id?: string;
      /** @example void_storm */
      url_name?: string;
      icon?: string;
      thumb?: string;
      /**
       * @description Mission name
       * @example Void Storm
       */
      name?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description Asks the server to return content translated into the specified language, default: `en`. */
    language?: "en" | "ru" | "ko" | "de" | "fr" | "pt" | "zh-hans" | "zh-hant" | "es" | "it" | "pl";
    /** @description Asks the server to return content for specified platform, default: `pc`. */
    platform?: "xbox" | "pc" | "ps4" | "switch";
    /** @description url_name of an item */
    url_name: string;
    /** @description ObjectId of auction */
    auction_id: string;
    /** @description auction type, if not specified implied: all */
    buyout_policy?: "with" | "direct";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Gets information about an item */
  getItemInfo: {
    parameters: {
      header?: {
        Platform?: components["parameters"]["platform"];
      };
      path: {
        url_name: components["parameters"]["url_name"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            payload?: {
              item?: {
                /**
                 * @description Object id of requested item
                 * @example 5a2feeb2c2c9e90cbdaa23d4
                 */
                id?: string;
                items_in_set?: components["schemas"]["ItemFull"][];
              };
            };
          };
        };
      };
    };
  };
}
